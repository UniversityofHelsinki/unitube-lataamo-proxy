image: node:18-alpine

# Cache node modules - speeds up future builds
cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - node_modules

# Define the stages
stages:
  - setup
  - build
  - audit_scan
  - test
  - deploy

# Define the process for each stage

# Define the process for setup stage
setup:
  stage: setup
  tags:
    - ohtu-build-4
  script:
    - npm install

# Define the process for build stage
build:
  stage: build
  tags:
    - ohtu-build-4
  script:
    - npm run build

# Define the process for test stage
test:
  stage: test
  services:
    - redis:latest
    - postgres:12.2-alpine
  variables:
    POSTGRES_DB: ${DATABASE}
    POSTGRES_USER: ${POSTGRES_USER}
    POSTGRES_PASSWORD: ${PASSWORD}
    POSTGRES_HOST_AUTH_METHOD: trust
  tags:
    - ohtu-build-4
  script:
    - npm run coverage
  coverage: /All files\s*\|\s*([\d\.]+)/
  artifacts:
    paths:
      - coverage/lcov.info
    expire_in: 1 hour

# Define the process for sonarcube check
sonarqube-check:
  stage: test
  tags:
    - ohtu-build-4
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [ "" ]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - ls -R coverage  # Print contents of the coverage directory
    - sonar-scanner
  allow_failure: true
  only:
    - master

# Define the process for deploy stage to development environment
deploy_oc_test:
  stage: deploy
  tags:
    - ohtu-build-4
  environment:
    name: development
  only:
    - oc-test
  script:
    - echo "====== Deploy to oc-test server ========"
    - echo "====== Install rsync and openssh ========="
    - apk add --no-cache rsync openssh
    - echo "====== Activate the ssh-agent ========"
    - eval $(ssh-agent -s)
    - echo "======= Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store ====="
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - echo "====== Add target servers secret key ======"
    - mkdir ~/.ssh
    - echo $SSH_PRIVATE_KEY  >> ~/.ssh/id_rsa
    - chmod 700 ~/.ssh && chmod 600 ~/.ssh/*
    - echo "====== Test ssh connection and make proxy folder if not exist ======"
    - ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -T lataamo@lataamo-oc-test.it.helsinki.fi "mkdir -p /home/lataamo/proxy"
    - echo "====== Sync local and remote directory ======"
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    - rsync -azPq -e "ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null" --exclude=".env" --exclude="/api/uploads" --exclude="/logs" --exclude="/files/licenses.json" --delete ./ lataamo@lataamo-oc-test.it.helsinki.fi:/home/lataamo/proxy
    - ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -T lataamo@lataamo-oc-test.it.helsinki.fi "pm2 restart app"

# Define the process for deploy stage to development environment
deploy_dev:
  stage: deploy
  tags:
    - ohtu-build-4
  environment:
    name: development
  only:
    - master
  except:
    # Skip deploy when scheduled npm audit and outdated scans are executed.
    - schedules
  script:
    - echo "====== Deploy to development server ========"
    - echo "====== Install rsync and openssh ========="
    - apk add --no-cache rsync openssh
    - echo "====== Activate the ssh-agent ========"
    - eval $(ssh-agent -s)
    - echo "======= Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store ====="
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - echo "====== Add target servers secret key ======"
    - mkdir ~/.ssh
    - echo $SSH_PRIVATE_KEY  >> ~/.ssh/id_rsa
    - chmod 700 ~/.ssh && chmod 600 ~/.ssh/*
    - echo "====== Test ssh connection and make api folder if not exist ======"
    - ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -T lataamo@lataamo-dev.it.helsinki.fi "mkdir -p /home/lataamo/proxy"
    - echo "====== Sync local and remote directory ======"
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    - rsync -azPq -e "ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null" --exclude=".env" --exclude="/api/uploads" --exclude="/logs" --exclude="/files/licenses.json" --delete ./ lataamo@lataamo-dev.it.helsinki.fi:/home/lataamo/proxy
    - ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -T lataamo@lataamo-dev.it.helsinki.fi "pm2 restart app"

# Define the process for deploy stage to test environment
deploy_test:
  stage: deploy
  tags:
    - ohtu-build-4
  environment:
    name: test
  only:
    - test
  script:
    - echo "====== Deploy to test server ========"
    - echo "====== Install rsync and openssh ========="
    - apk add --no-cache rsync openssh
    - echo "====== Activate the ssh-agent ========"
    - eval $(ssh-agent -s)
    - echo "======= Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store ====="
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - echo "====== Add target servers secret key ======"
    - mkdir ~/.ssh
    - echo $SSH_PRIVATE_KEY  >> ~/.ssh/id_rsa
    - chmod 700 ~/.ssh && chmod 600 ~/.ssh/*
    - echo "====== Test ssh connection and make api folder if not exist ======"
    - ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -T lataamo@lataamo-test.it.helsinki.fi "mkdir -p /home/lataamo/proxy"
    - echo "====== Sync local and remote directory ======"
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    - rsync -azPq -e "ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null" --exclude=".env" --exclude="/api/uploads" --exclude="/logs" --exclude="/files/licenses.json"  --delete ./ lataamo@lataamo-test.it.helsinki.fi:/home/lataamo/proxy
    - ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -T lataamo@lataamo-test.it.helsinki.fi "pm2 restart app"

# Define the process for deploy stage to production environment
deploy_prod:
  stage: deploy
  tags:
    - ohtu-build-4
  environment:
    name: prod
  only:
    - prod
  when: manual
  script:
    - echo "====== Deploy to production server ========"
    - echo "====== Install rsync and openssh ========="
    - apk add --no-cache rsync openssh
    - echo "====== Activate the ssh-agent ========"
    - eval $(ssh-agent -s)
    - echo "======= Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store ====="
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - echo "====== Add target servers secret key ======"
    - mkdir ~/.ssh
    - echo $SSH_PRIVATE_KEY  >> ~/.ssh/id_rsa
    - chmod 700 ~/.ssh && chmod 600 ~/.ssh/*
    - echo "====== Test ssh connection and make api folder if not exist ======"
    - ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -T lataamo@lataamo.helsinki.fi "mkdir -p /home/lataamo/proxy"
    - echo "====== Sync local and remote directory ======"
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    - rsync -azPq -e "ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null" --exclude=".env" --exclude="/api/uploads" --exclude="/logs" --exclude="/files/licenses.json"  --delete ./ lataamo@lataamo.helsinki.fi:/home/lataamo/proxy
    - ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -T lataamo@lataamo.helsinki.fi "NODE_ENV=production pm2 restart app"

# Rules for the scheduled npm audit and outdated scans
dependency scanning:
  stage: audit_scan
  tags:
    - ohtu-build-4
  allow_failure: true
  only:
    - schedules
  before_script:
    - apk add --no-cache curl
  script:
    # Run npm audit and npm outdated commands and write outputs to a txt file.
    - echo "Running npm diagnostics, audit and outdated..."
    - export RESULT_FILE="./npm_scan_results.txt"
    # Create result file
    - touch $RESULT_FILE
    # Write to the result file
    - echo " ************ UNITUBE-LATAAMO-PROXY NPM AUDIT RESULT ************ " >> $RESULT_FILE
    - echo "        https://version.helsinki.fi/tike-ohtu/unitube-lataamo-proxy" >> $RESULT_FILE
    - echo "" >> $RESULT_FILE
    - echo "                   === npm audit security report ===" >> $RESULT_FILE
    - echo "" >> $RESULT_FILE
    # Run npm audit and "catch" the possible non zero exit code (https://docs.gitlab.com/ee/ci/yaml/#script)
    - "npm audit --parseable | awk -F '\t' 'NF {print $2}' >> $RESULT_FILE || exit_code=$?"
    # npm audit --parseable | awk -F $'\t' 'NF {print "   Package: "$2, "\tLevel: "$3, "\tMore info: "$6}' # this would be nice format
    # Add a message based on npm audit's return code
    - if [ $exit_code -ne 0 ]; then echo "Some vulnerabilities was found, check the above packages." >> $RESULT_FILE; fi;
    - if [ $exit_code -eq 0 ]; then echo "All is good, enjoy the moment." >> $RESULT_FILE; fi;
    - echo "" >> $RESULT_FILE
    - echo " ************ UNITUBE-LATAAMO-PROXY NPM OUTDATED RESULT ************ " >> $RESULT_FILE
    - echo "" >> $RESULT_FILE
    - echo "                   === npm outdated report ===" >> $RESULT_FILE
    - echo "" >> $RESULT_FILE
    # Run npm outdated and "catch" the possible non zero exit code (https://docs.gitlab.com/ee/ci/yaml/#script)
    - npm outdated >> $RESULT_FILE || exit_code=$?
    - echo "" >> $RESULT_FILE
    - echo " ************ END OF FILE ************ " >> $RESULT_FILE
    - cat $RESULT_FILE
    - echo "Done with npm diagnostics."
    - echo "Sending results to Slack..."
    # Send result file to "audit-logs" channel in Ohtu's Slack space (see https://api.slack.com/methods/files.upload).
    - "curl -F file=@${CI_PROJECT_DIR}/$RESULT_FILE -F 'initial_comment=Unitube-Lataamo-proxy npm report' -F channels=${AUDIT_RESULT_SLACK_CHANNEL_ID} -F filename=$RESULT_FILE -F filetype=text -H 'Authorization: Bearer '${SLACK_FILE_UPLOAD_TOKEN} https://slack.com/api/files.upload"
    - echo "Done with sending results to Slack."
